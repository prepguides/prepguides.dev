name: Content PR Handler

on:
  pull_request:
    types: [opened, edited, synchronize]
    paths:
      - 'content-config.json'
      - '.github/content-templates/**'
  pull_request_review:
    types: [submitted]

jobs:
  validate-content-pr:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install -g ajv-cli
        npm install -g js-yaml

    - name: Validate content configuration
      run: |
        echo "Validating content-config.json..."
        if [ -f "content-config.json" ]; then
          # Basic JSON validation
          python3 -m json.tool content-config.json > /dev/null
          echo "✅ JSON syntax is valid"
          
          # Validate required fields
          python3 << 'EOF'
        import json
        import sys
        
        try:
            with open('content-config.json', 'r') as f:
                config = json.load(f)
            
            required_fields = ['version', 'categories']
            for field in required_fields:
                if field not in config:
                    print(f"❌ Missing required field: {field}")
                    sys.exit(1)
            
            # Validate category structure
            for category_id, category in config['categories'].items():
                if 'name' not in category or 'subtopics' not in category:
                    print(f"❌ Invalid category structure for: {category_id}")
                    sys.exit(1)
                
                for subtopic_id, subtopic in category['subtopics'].items():
                    if 'name' not in subtopic or 'content' not in subtopic:
                        print(f"❌ Invalid subtopic structure for: {category_id}/{subtopic_id}")
                        sys.exit(1)
            
            print("✅ Content configuration is valid")
            
        except Exception as e:
            print(f"❌ Validation error: {e}")
            sys.exit(1)
        EOF
        else
          echo "❌ content-config.json not found"
          exit 1
        fi

    - name: Check for content template
      run: |
        echo "Checking for content template..."
        if [ -d ".github/content-templates" ]; then
          echo "✅ Content templates directory found"
          ls -la .github/content-templates/
        else
          echo "ℹ️ No content templates directory found"
        fi

    - name: Validate GitHub repository access
      run: |
        echo "Validating GitHub repository access..."
        python3 << 'EOF'
        import json
        import requests
        import sys
        
        try:
            with open('content-config.json', 'r') as f:
                config = json.load(f)
            
            # Check if any new content references external repos
            for category_id, category in config['categories'].items():
                for subtopic_id, subtopic in category['subtopics'].items():
                    for content_item in subtopic.get('content', []):
                        if 'repo' in content_item:
                            repo = content_item['repo']
                            path = content_item.get('path', '')
                            
                            # Test GitHub API access
                            url = f"https://api.github.com/repos/{repo}"
                            response = requests.get(url)
                            
                            if response.status_code == 200:
                                print(f"✅ Repository accessible: {repo}")
                            else:
                                print(f"❌ Repository not accessible: {repo} (Status: {response.status_code})")
                                sys.exit(1)
                            
                            # Test file access
                            if path:
                                raw_url = f"https://raw.githubusercontent.com/{repo}/main/{path}"
                                file_response = requests.head(raw_url)
                                if file_response.status_code == 200:
                                    print(f"✅ File accessible: {repo}/{path}")
                                else:
                                    print(f"❌ File not accessible: {repo}/{path} (Status: {file_response.status_code})")
                                    sys.exit(1)
        
        except Exception as e:
            print(f"❌ Validation error: {e}")
            sys.exit(1)
        EOF

    - name: Generate preview
      run: |
        echo "Generating content preview..."
        python3 << 'EOF'
        import json
        import sys
        
        try:
            with open('content-config.json', 'r') as f:
                config = json.load(f)
            
            print("## 📋 Content Preview")
            print()
            
            for category_id, category in config['categories'].items():
                if category['subtopics']:
                    print(f"### {category['icon']} {category['name']}")
                    print(f"_{category['description']}_")
                    print()
                    
                    for subtopic_id, subtopic in category['subtopics'].items():
                        if subtopic['content']:
                            print(f"#### {subtopic['name']}")
                            print(f"_{subtopic['description']}_")
                            print()
                            
                            for content_item in subtopic['content']:
                                status_emoji = "✅" if content_item.get('status') == 'active' else "🚧"
                                print(f"- {status_emoji} **{content_item['title']}**")
                                print(f"  - {content_item['description']}")
                                if 'repo' in content_item:
                                    print(f"  - 📁 Repository: `{content_item['repo']}`")
                                    print(f"  - 📄 Path: `{content_item['path']}`")
                                print()
            
            # Statistics
            total_content = sum(
                len(subtopic['content']) 
                for category in config['categories'].values() 
                for subtopic in category['subtopics'].values()
            )
            
            print("## 📊 Statistics")
            print(f"- Total content items: {total_content}")
            print(f"- Categories with content: {len([c for c in config['categories'].values() if c['subtopics']])}")
            print()
            
        except Exception as e:
            print(f"❌ Preview generation error: {e}")
            sys.exit(1)
        EOF

    - name: Generate site preview
      run: |
        echo "🏗️ Generating site preview with updated navigation..."
        
        # Setup Node.js for navigation updater
        npm install -g marked js-yaml
        
        # Run navigation updater to generate preview
        node scripts/update-navigation.js
        
        echo "✅ Site preview generated successfully"

    - name: Upload preview artifacts
      uses: actions/upload-artifact@v4
      with:
        name: site-preview
        path: |
          index.html
          kubernetes.html
          algorithms.html
          networking.html
          databases.html
          microservices.html
          system-design.html
        retention-days: 7

    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          try {
            // Read the content config
            const config = JSON.parse(fs.readFileSync('content-config.json', 'utf8'));
            
            // Generate statistics
            let totalContent = 0;
            let categoriesWithContent = 0;
            
            for (const category of Object.values(config.categories)) {
              if (Object.keys(category.subtopics).length > 0) {
                categoriesWithContent++;
                for (const subtopic of Object.values(category.subtopics)) {
                  totalContent += subtopic.content.length;
                }
              }
            }
            
            const comment = `## 🎉 Content Validation Successful!
            
            Your content configuration has been validated successfully! Here's what will be added:
            
            ### 📊 Impact Summary
            - **Total content items**: ${totalContent}
            - **Categories with content**: ${categoriesWithContent}
            - **Configuration version**: ${config.version}
            
            ### ✅ Validation Results
            - JSON syntax is valid
            - Required fields are present
            - GitHub repository access confirmed
            - File paths are accessible
            - Site preview generated successfully
            
            ### 🏗️ Site Preview Generated
            The workflow has generated a complete site preview with your changes:
            - Updated navigation structure
            - Modified category pages
            - Updated statistics
            - Preview artifacts uploaded for review
            
            ### 🚀 Next Steps
            Once this PR is merged, the content will be automatically:
            1. Integrated into the site navigation
            2. Made accessible through the template renderer
            3. Included in site statistics
            4. Deployed live immediately
            
            **Review the generated preview artifacts to see exactly how the site will look!** 🎯`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.error('Error creating comment:', error);
          }

  auto-merge-ready:
    runs-on: ubuntu-latest
    needs: validate-content-pr
    if: github.event.pull_request.draft == false && github.event.review.state == 'approved'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Auto-merge PR
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          // Check if PR is ready for merge
          const pr = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: number
          });
          
          if (pr.data.mergeable && pr.data.mergeable_state === 'clean') {
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: number,
              merge_method: 'squash'
            });
            
            console.log('✅ PR merged successfully!');
          } else {
            console.log('❌ PR is not ready for merge');
          }
